<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/2020/02/19/spring/"/>
      <url>/2020/02/19/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.Spring概述"></a>1.Spring概述</h3><blockquote><p>IoC 反转控制 AOP面向切片编程为内核</p></blockquote><ul><li>Spring优势：方便解耦，简化开发，AOP变成的支持，声明式事务的支持，方便程序的测试，方便继承各种优秀的框架，降低java EE API的使用难度，java源码经典学习范例</li><li>Spring体系结构</li></ul><img src="https://img-blog.csdnimg.cn/20191216224813110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjgyNTI1,size_10,color_FFFFFF,t_70" alt="Spring Framework Runtime" style="zoom: 50%;" /><h3 id="2-IoC的概念"><a href="#2-IoC的概念" class="headerlink" title="2. IoC的概念"></a>2. IoC的概念</h3><ul><li><p>jdbcDemo1 debug小记</p><p>更换版本5.1.6-&gt;5.1.46</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><p>程序的耦合和解耦</p><ul><li>开发中应注意编译期不依赖，运行时才依赖</li><li>解耦思路<br>使用反射来创建对象，避免使用new关键字<br>通过读取配置文件来获取要创建的对象全限定类名</li></ul><p>工厂模式解耦</p><ul><li><p>创建Bean对象的工厂，Bean指可重用的组件</p><pre class=" language-java"><code class="language-java">IAccountService as <span class="token operator">=</span> <span class="token punctuation">(</span>IAccountService<span class="token punctuation">)</span> BeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-使用Spring的IoC解决程序的耦合"><a href="#3-使用Spring的IoC解决程序的耦合" class="headerlink" title="3.使用Spring的IoC解决程序的耦合"></a>3.使用Spring的IoC解决程序的耦合</h3><h4 id="IoC创建对象的时刻"><a href="#IoC创建对象的时刻" class="headerlink" title="IoC创建对象的时刻"></a>IoC创建对象的时刻</h4><ul><li><p>ApplicationContext: 单例对象适用（实际多采用此接口      </p><p>它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。</p></li></ul><h4 id="BeanFactory创建对象的时刻"><a href="#BeanFactory创建对象的时刻" class="headerlink" title="BeanFactory创建对象的时刻"></a>BeanFactory创建对象的时刻</h4><ul><li><p>BeanFactory: 多例对象使用</p><p>它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象</p></li></ul><h4 id="Spring对Bean的管理细节"><a href="#Spring对Bean的管理细节" class="headerlink" title="Spring对Bean的管理细节"></a>Spring对Bean的管理细节</h4><ul><li><p>创建Bean的三种方式</p><ul><li><p>第一种方式：使用默认构造函数构建</p><p>在spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建</p></li><li><p>第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.StaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul></li><li><p>bean标签的scope属性：   </p><p>作用：用于指定bean的作用范围    </p><p>取值： 常用的就是单例的和多例的        </p><ul><li><p>singleton：单例的（默认值）</p><p>一个应用只有一个对象的实例。它的作用范围就是整个引用。 </p><p>生命周期： </p><ol><li>对象出生：当应用加载，创建容器时，对象就被创建了。 </li><li>对象活着：只要容器在，对象一直活着。</li><li>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</li></ol><p>单例对象的生命周期与容器相同</p></li><li><p>prototype：多例的</p><p>每次访问对象时，都会重新创建对象实例。</p><p> 生命周期：</p><ol><li>对象出生：当使用对象时，创建新的对象实例。 </li><li>对象活着：只要对象在使用中，就一直活着。 </li><li>对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了。</li></ol></li><li><p>request：作用于web应用的请求范围，同一次请求创建一个实例</p></li><li><p>session：作用于web应用的会话范围，同一个session创建一个实例</p></li><li><p>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</p></li><li><p>init-method：指定类中的初始化方法名称。 destroy-method：指定类中销毁方法名称。</p></li></ul></li></ul><h3 id="4-依赖注入（Dependency-Injection"><a href="#4-依赖注入（Dependency-Injection" class="headerlink" title="4.依赖注入（Dependency Injection)"></a>4.依赖注入（Dependency Injection)</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><p>依赖注入：Dependency Injection。</p><p>它是 spring 框架核心 ioc 的具体实现，依赖关系的维护就称之为依赖注入。 </p><p>我们的程序在编写时，通过控制反转，把对象的创建交给了 spring，但是代码中不可能出现没有依赖的情况。 ioc 解耦只是降低他们的依赖关系，但不会消除。例如：我们的业务层仍会调用持久层的方法。 那这种业务层和持久层的依赖关系，在使用 spring 之后，就让 spring 来维护了。 简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p></li></ul><h4 id="三类能注入的数据"><a href="#三类能注入的数据" class="headerlink" title="三类能注入的数据"></a>三类能注入的数据</h4><ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul><h4 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h4><ul><li><p>第一种：使用构造函数提供</p><p>使用的标签:constructor-arg    </p><p>标签出现的位置：bean标签的内部    </p><p>标签中的属性：     </p><ol><li>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</li><li>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始</li><li>name：用于指定给构造函数中指定名称的参数赋值（常用</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</li><li>优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功</li><li>弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供</li></ol></li><li><p>第二种：使用set方法提供（更常用的方式</p><p>涉及的标签：property </p><p>出现的位置：bean标签的内部</p><p>标签的属性</p><ol><li>name：用于指定注入时所调用的set方法名称</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</li><li>优势：创建对象时没有明确的限制，可以直接使用默认构造函数    </li><li>弊端：如果有某个成员必须有值，则获取对象是有可能set方法没有执行。</li></ol></li><li><p>第三种：使用注解提供</p></li></ul><h3 id="5-Spring基于注解的IOC以及IOC的案例"><a href="#5-Spring基于注解的IOC以及IOC的案例" class="headerlink" title="5.Spring基于注解的IOC以及IOC的案例"></a>5.Spring基于注解的IOC以及IOC的案例</h3><h4 id="Spring中IOC的常用注解"><a href="#Spring中IOC的常用注解" class="headerlink" title="Spring中IOC的常用注解"></a>Spring中IOC的常用注解</h4><ul><li><p>用于创建对象的</p><p>作用与在XML配置文件中<bean>标签实现的功能相同</p><p>@Component 用于把当前类对象存入Spring容器中</p><p>属性：</p><ul><li>value：用于指定bean的id，默认值为当前类名，且首字母小写</li></ul><p>以下三个注解他们的作用和属性与Component相同，spring框架提供了明确的三层使用的注解，使三层对象更加清晰</p><ul><li>Controller：一般用在表现层</li><li>Service：一般用在业务层</li><li>Repository：一般用在持久层</li></ul></li><li><p>用于注入数据的</p><p>作用与在xml配置文件中的bean标签中<property>标签实现的功能相同</p><ul><li><p>@Autowired: </p><p>作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功；如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错；</p><p>如果Ioc容器中有多个类型匹配时：会出现报错</p><p>出现位置：可以是变量上，也可以是方法上</p><p>细节：在使用注解注入时，set方法就不是必须的了</p></li><li><p>@Qualifier</p><p>作用：在按照类中注入的基础之上再按照名称注入，它在给类成员注入时不能单独使用，而是与Autowired搭配使用，但是在给方法参数注入时可以</p><p>属性value：用于指定注入bean的id</p></li><li><p>@Resource</p><p>作用：直接按照bean的id注入。它可以独立使用</p><p>属性：</p><p>name：用于指定bean的id。</p></li></ul><p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</p><p>另外，集合类型的注入只能通过XML来实现。</p><ul><li><p>Value</p><p>作用：用于注入基本类型和String类型的数据</p><p>属性value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）</p><p>SpEL的写法：${表达式}</p><p>@Value的值有两类：<br>① ${ property : default_value }<br>② #{ obj.property? :default_value }<br>第一个注入的是外部配置文件对应的property，第二个则是SpEL表达式对应的内容。 default_value即前面的值为空时的默认值。注意二者的不同，#{}里面那个obj代表对象。</p></li></ul></li><li><p>用于改变作用范围的</p><p>作用与在xml配置文件中的bean标签中<scope>标签实现的功能相同</p><ul><li><p>@Scope</p><p>作用：用于指定bean的作用范围</p><p>属性value：指定范围的取值。常用取值：singleton prototype</p></li></ul></li><li><p>与生命周期相关</p><p>作用与在xml配置文件中的bean标签中<init-method>和<destroy-method>标签实现的功能相同</p><ul><li><p>@PreDestroy</p><p>作用：用于指定销毁方法</p></li><li><p>@PostConstruct</p><p>作用：用于指定初始化方法</p></li></ul></li><li><p>案例使用xml方式与注解方式实现单表的CRUD操作（持久层技术选择：dubtils</p></li><li><p>改造基于注解的IOC案例，使用纯注解的方式实现即新注解使用</p></li></ul><h4 id="spring中的新注解"><a href="#spring中的新注解" class="headerlink" title="spring中的新注解"></a>spring中的新注解</h4><ul><li><p>Configuration</p><p>作用：指定当前类是一个配置类</p><p>细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。</p></li><li><p>ComponentScan</p><p>作用：用于通过注解指定spring在创建容器时要扫描的包</p><p>属性value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</p><p>使用此注解就等同于在xml中配置了:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>Bean</p><p>作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</p><p>属性name：用于指定bean的id。当不写时，默认值是当前方法的名称</p><p>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会</p><p>去容器中查找有没有可用的bean对象。</p><p>查找的方式和Autowired注解的作用是一样的</p></li><li><p>PropertySource</p><p>作用：用于指定properties文件的位置</p><p>属性value：指定文件的名称和路径。</p><p>关键字：classpath，表示类路径下</p></li><li><p>给容器中注册组件</p><ol><li><p>包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]</p></li><li><p>@Bean[导入的第三方包里面的组件]</p></li><li><p>@Import[快速给容器中导入一个组件]</p><ul><li>@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名</li><li>ImportSelector:返回需要导入的组件的全类名数组</li><li>ImportBeanDefinitionRegistrar:手动注册bean到容器中</li></ul></li><li><p>使用Spring提供的 FactoryBean（工厂Bean</p><ul><li><p>默认获取到的是工厂bean调用getObject创建的对象</p></li><li><p>要获取工厂Bean本身，我们需要给id前面加一个&amp;</p><p>​    &amp;colorFactoryBean</p></li></ul></li></ol></li><li><p>bean的生命周期</p><ol><li><p>bean创建—初始化—-销毁的过程</p></li><li><p>容器管理bean的生命周期</p><p>我们可以自定义初始化和销毁方法，容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁方法</p><ol><li><p>构造（对象创建）</p><p>单实例：在容器启动的时候创建对象</p><p>多实例：在每次获取的时候创建对象</p></li><li><p>销毁：</p><p>单实例：容器关闭的时候</p><p>多实例：容器不会管理这个bean；容器不会调用销毁方法；</p></li><li><p>指定初始化和销毁方法</p><p>通过@Bean指定init-method和destroy-method</p></li><li><p>通过让Bean实现</p><p>InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）</p></li><li><p>可以使用JSR250</p><p>@PostConstruct：在bean创建完成并且属性赋值完成，来执行初始化方法</p><p>@PreDestroy：在容器销毁bean之前通知我们进行清理工作</p></li></ol></li><li><p>BeanPostProcessor原理</p><p>遍历得到容器中所有的BeanPostProcessor；挨个执行beforeInitialization，一但返回null，跳出for循环，不会执行后面的BeanPostProcessor.postProcessorsBeforeInitialization</p></li><li><p>BeanPostProcessor【interface】：bean的后置处理器；</p><ul><li>在bean初始化前后进行一些处理工作；</li><li>postProcessBeforeInitialization:在初始化之前工作</li><li>postProcessAfterInitialization:在初始化之后工作</li></ul></li><li><p>Spring底层对 BeanPostProcessor 的使用；</p><p> bean赋值，注入其他组件，@Autowired，生命周期注解功能，@Async,xxx BeanPostProcessor;</p></li></ol></li></ul><h3 id="6-AOP"><a href="#6-AOP" class="headerlink" title="6.AOP"></a>6.AOP</h3><h4 id="Spring和Junit整合"><a href="#Spring和Junit整合" class="headerlink" title="Spring和Junit整合"></a>Spring和Junit整合</h4><ul><li><p>Junit单元测试中，没有main方法也能执行，junit集成了一个main方法，该方法就会查找当前测试类中的@Test注解并执行</p></li><li><p>Junit不检测是否使用Spring框架，因此不会读取配置文件/类、创建Spring核心容器</p></li><li><p>Spring整合junit的配置</p><ol><li>导入spring整合junit的jar(坐标)</li><li>使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的@Runwith</li><li>告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置@ContextConfiguration<ul><li>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下</li><li>classes：指定注解类所在地位置</li></ul></li></ol></li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul><li><p>特点：字节码随用随创建，随用随加载</p></li><li><p>作用：不修改源码的基础上对方法增强</p></li><li><p>分类：</p><ul><li><p>基于子类的动态代理</p><ul><li><p>涉及的类：Enhancer</p></li><li><p>提供者：第三方cglib库</p></li><li><p>如何创建代理对象：使用Enhancer类中的create方法</p></li><li><p>创建代理对象的要求：被代理类不能是最终类</p></li><li><p>create方法的参数：</p><ol><li><p>Class：字节码</p><p>它是用于指定被代理对象的字节码。</p></li><li><p>Callback：用于提供增强的代码</p><p>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</p><p>我们一般写的都是该接口的子接口实现类：MethodInterceptor </p><p>此接口的实现类都是谁用谁写</p></li></ol></li></ul></li><li><p>基于接口的动态代理：</p><ul><li><p>涉及的类：</p></li><li><p>如何创建代理对象：使用Proxy类中的newProxyInstance方法</p></li><li><p>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用  </p></li><li><p>newProxyInstance方法的参数：</p><ol><li><p>ClassLoader：类加载器</p><p>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</p></li><li><p>Class[]：字节码数组</p><p>它是用于让代理对象和被代理对象有相同方法。固定写法。*      </p></li><li><p>InvocationHandler：用于提供增强的代码</p><p>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写。</p></li></ol></li></ul></li></ul></li></ul><h4 id="AOP的概念"><a href="#AOP的概念" class="headerlink" title="AOP的概念"></a>AOP的概念</h4><ul><li><p>Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。 </p></li><li><p>Pointcut(切入点): 所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</p></li><li><p>Advice(通知/增强): 所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。 </p></li><li><p>Introduction(引介): 引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。 </p></li><li><p>Target(目标对象): 代理的目标对象。 </p></li><li><p>Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。 </p></li><li><p>Proxy（代理）: 一个类被 AOP 织入增强后，就产生一个结果代理类。 </p></li><li><p>Aspect(切面): 是切入点和通知（引介）的结合。</p></li></ul><h4 id="Spring中基于xml和注解的AOP配置"><a href="#Spring中基于xml和注解的AOP配置" class="headerlink" title="Spring中基于xml和注解的AOP配置"></a>Spring中基于xml和注解的AOP配置</h4><ul><li><p>spring中基于XML的AOP配置步骤</p><ol><li><p>把通知Bean也交给spring来管理</p></li><li><p>使用aop:config标签表明开始AOP的配置</p></li><li><p>使用aop:aspect标签表明配置切面           </p><p>id属性：是给切面提供一个唯一标识</p><p>ref属性：是指定通知类bean的Id。    </p></li><li><p>在aop:aspect标签的内部使用对应标签来配置通知的类型</p><p>我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知 </p><p>aop:before：表示配置前置通知</p><ul><li>method属性：用于指定Logger类中哪个方法是前置通知                </li><li>pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强        </li></ul><p>切入点表达式的写法：</p><ul><li><p>关键字：execution(表达式) </p></li><li><p>表达式：</p><p>访问修饰符  返回值  包名.包名.包名…类名.方法名(参数列表)            标准的表达式写法：                </p><p>​    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()            访问修饰符可以省略</p><p>​    void com.itheima.service.impl.AccountServiceImpl.saveAccount()            返回值可以使用通配符，表示任意返回值</p><p>​    * com.itheima.service.impl.AccountServiceImpl.saveAccount()            包名可以使用通配符，表示任意包。但是有几级包，就需要写几个</p><p>​    * *.*.*.*.AccountServiceImpl.saveAccount())</p><p>包名可以使用..表示当前包及其子包 </p><p>​    * *..AccountServiceImpl.saveAccount() </p><p>类名和方法名都可以使用*来实现通配</p><p>​    *..*.*() </p><p>参数列表：可以直接写数据类型：</p><ol><li>基本类型直接写名称           int</li><li>引用类型写包名.类名的方式   java.lang.String </li></ol><p>可以使用通配符表示任意类型，但是必须有参数</p><p>可以使用..表示有无参数均可，有参数可以是任意类型</p><p>全通配写法：</p><p>​    *..*.*(..)            </p><p>实际开发中切入点表达式的通常写法：</p><p>切到业务层实现类下的所有方法</p><p>​    * com.itheima.service.impl.*.*(..)</p></li></ul></li></ol></li><li><p>@Pointcut </p><p>作用： 指定切入点表达式 </p><p>属性：</p><p>​    value：指定表达式的内容 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>引用方式：<span class="token comment" spellcheck="true">/*** 环绕通知* @param pjp* @return*/</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意：千万别忘了写括号</span><span class="token keyword">public</span> Object <span class="token function">transactionAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义返回值</span>    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取方法执行所需的参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前置通知：开启事务</span>        <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行方法</span>        rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后置通知：提交事务</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//异常通知：回滚事务</span>        <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最终通知：释放资源</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="7-Spring中JDBCTemplate"><a href="#7-Spring中JDBCTemplate" class="headerlink" title="7.Spring中JDBCTemplate"></a>7.Spring中JDBCTemplate</h3><ul><li><p>JdbcTemplate的作用：用于和数据库交互，实现CRUD</p></li><li><p>如何创建</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>常用方法</p><ul><li>第一种方式：在 dao 中定义 JdbcTemplate</li><li>第二种方式：让 dao 继承 JdbcDaoSupport</li><li>区别：<ul><li>第一种在 Dao 类中定义 JdbcTemplate 的方式，适用于所有配置方式（xml 和注解都可以）。 </li><li>第二种让 Dao 继承 JdbcDaoSupport 的方式，只能用于基于 XML 的方式，注解用不了。</li></ul></li></ul></li></ul><h3 id="8-Spring中事务控制"><a href="#8-Spring中事务控制" class="headerlink" title="8.Spring中事务控制"></a>8.Spring中事务控制</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li><p>PlatformTransactionManager接口提供事务操作的方法，包含有3个具体的操作</p><ul><li><p>获取事务状态信息</p><p>TransactionStatus getTransaction(TranscationDefinition definition)</p></li><li><p>提交事务</p><p>void commit(TransactionStatus status)</p></li><li><p>回滚事务</p><p>void rollback(TransactionStatus status)</p></li></ul></li><li><p>真正管理事务的对象 org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用 org.springframework.orm.hibernate5.HibernateTransactionManager 使用 Hibernate 版本进行持久化数据时使用</p></li><li><p>TransactionDefinition</p><ul><li><p>获取事务对象名称</p><p>String getName()</p></li><li><p>获取事务隔离级别</p><p>int getIsolationLevel()</p></li><li><p>获取事务传播行为</p><p>int getPropagationBehavior</p><p>事务的传播行为</p><ul><li>REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</li><li>SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li><li>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常 </li><li>REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。 </li><li>NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li><li>NEVER:以非事务方式运行，如果当前存在事务，抛出异常</li><li>NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED 类似的操作。</li></ul></li><li><p>获取事务超时时间</p><p>int getTimeout()</p></li><li><p>获取事务是否只读</p><p>boolean isReadOnly()</p></li></ul></li><li><p>TransactionStatus接口描述了某个时间点上事务对象的状态信息，包含六个具体的操作</p><ul><li><p>刷新事务</p><p>void flush()</p></li><li><p>获取是否存在储存点</p><p>boolean isCompleted()</p></li><li><p>获取事务是否完成</p><p>boolean isNewTransaction()</p></li><li><p>获取事务是否回滚</p><p>boolean isRollbackOnly()</p><p>设置事务回滚</p><p>void setRollbackOnly()</p></li></ul></li></ul><h4 id="基于XML"><a href="#基于XML" class="headerlink" title="基于XML"></a>基于XML</h4><ol><li><p>配置事务管理器</p></li><li><p>配置事务的通知</p><p>此时我们需要导入事务的约束tx名称空间和约束，同时也需要aop的        使用tx:advice标签配置事务通知</p><p>属性：</p><ul><li>id：给事务通知起一个唯一标识</li><li>transaction-manager：给事务通知提供一个事务管理器引用</li></ul></li><li><p>配置AOP中的通用切入点表达式</p></li><li><p>建立事务通知和切入点表达式的对应关系</p></li><li><p>配置事务的属性</p><p>在事务的通知tx:advice标签的内部</p><ul><li>isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</li><li>propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</li><li>read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</li><li>timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</li><li>rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</li><li>no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</li></ul></li></ol><h4 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h4><ol><li>配置事务管理器</li><li>开启spring对注解事务的支持</li><li>在需要事务支持的地方使用@Transactional注解</li></ol><h3 id="9-Spring5新特性"><a href="#9-Spring5新特性" class="headerlink" title="9.Spring5新特性"></a>9.Spring5新特性</h3><p>待完善</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2020/02/19/mybatis/"/>
      <url>/2020/02/19/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul><li><p>mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身， 而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。 </p></li><li><p>mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并 返回。 </p></li><li><p>采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我 们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。</p></li><li><p>ORM（Object Relational Mappging）对象关系映射</p><p>即把数据库表和实体类即实体类的属性对应起来，让我们可以操作实体类实现操作数据库表</p></li></ul><h2 id="2-入门"><a href="#2-入门" class="headerlink" title="2.入门"></a>2.入门</h2><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul><li><p>创建maven工程并导入坐标</p></li><li><p>创建实体类和dao的接口</p></li><li><p>创建Mybatis的主配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置mysql的环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置数据源（连接池） --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的4个基本信息 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建映射配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置查询所有--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>环境搭建注意事项</p><ul><li>在mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper</li><li>mybatis的映射配置文件配置必须和dao接口的包结构相同。</li><li>映射配置文件的Mapper标签和namesplace的属性值必须是dao接口的全限定类名。</li><li>映射配置文件的操作配置(select)，id属性的取值必须是dao类接口。</li><li>当我们遵从了以上注意项之后，我们在开发中就无需再写dao的实现类。</li></ul></li></ul><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.读取配置文件</span>InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象</span>IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6.释放资源</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意事项：</p><p>不要忘记在映射配置中告知Mybatis要封装到哪个实体类中，配置的方式:指定实体类的全限定类名</p><ul><li><p>Mybatis基于注解的入门案例：</p><ul><li>把IUserDao移除，在dao接口的方法上使用@Select注解，并且指定SQL语句，同时需要在SqlMapConfig.xml的Mapper配置时，使用class属性指定dao接口的全限定类名</li><li>实际开发中一般不写dao实现类（无论是xml还是注解，而Mybatis也支持写dao实现类</li></ul></li><li><p>自定义Mybatis的设计模式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.读取配置文件</span>InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象</span>IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>工厂模式</p></li><li><p>构造者模式</p><p>在创建工厂时使用SqlSessionFactoryBuilder进行构建</p></li><li><p>代理模式</p></li></ul></li></ul><h4 id="自定义Mybatis的分析"><a href="#自定义Mybatis的分析" class="headerlink" title="自定义Mybatis的分析"></a>自定义Mybatis的分析</h4><ol><li><p>根据配置文件的信息创建Connection对象</p><p>注册驱动获取链接</p></li><li><p>获取预处理对象PreparedStatement</p><p>conn.preparedStatement(sql);</p></li><li><p>执行查询</p><p><code>ResultSet resultSet=preparedStatement.executeQuery();</code></p></li><li><p>遍历结果进行封装</p><pre class=" language-java"><code class="language-java">List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    E element<span class="token operator">=</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>配置的全限定类名<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 进行封装，把每个rs的内容都添加到element中       * 我们就把表的列名看成实体类的属性名称       * 就可以使用反射的方式来根据名称获得每个属性，并把值赋进去       */</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ul><li><p>使以上方法执行需要提供两个信息</p><ul><li><p>连接信息</p></li><li><p>映射信息</p><p>映射信息包含执行的sql以及封装的实体类的全限定类名，二者合并为一个对象Mapper</p></li></ul></li><li><pre class=" language-java"><code class="language-java">IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据Dao接口的字节码创建dao的代理对象</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> daoInterface<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 类加载器：使用和被代理对象相同的类加载器    * 代理对象实现的接口：和被代理对象相同的接口    * 如何被代理：即InvocationHandler接口的自定义实现类，并实现selectList方法    */</span>    Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>类加载器，代理对象要实现的接口字节码，如何代理<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="3-MyBatisCRUD"><a href="#3-MyBatisCRUD" class="headerlink" title="3.MyBatisCRUD"></a>3.MyBatisCRUD</h2><h4 id="M’y’Batis自定义流程"><a href="#M’y’Batis自定义流程" class="headerlink" title="M’y’Batis自定义流程"></a>M’y’Batis自定义流程</h4><ul><li><p>SqlSessionFactoryBuilder接收SqlMapConfig.xml文件流，构建出SqlSessionFactory对象</p></li><li><p>SqlSessionFactory读取SqlMapConfig.xml中连接数据库信息和mapper映射信息，用来生产出真正操作数据库的SqlSession对象</p></li><li><p>SqlSession作用  无论哪个分支，除了获取数据库信息，还需要得到sql语句</p><ul><li><p>生成代理接口  </p><p>SqlSessionImpl对象的getMapper方法分两步来实现</p><ol><li>先用SqlSessionFactory读取的数据库连接信息建立Connection对象</li><li>通过jdk代理模式创建出代理对象作为getMapper的方法返回值，这里主要是在创建代理对象时第三个参数处理类里面得到sql语句执行对应的CRUD操作</li></ol></li><li><p>定义通用CRUD方法</p><p>SqlSessionImpl对象中提供selectList()方法</p><ol><li>用SqlSessionFactory读取的数据库连接信息创建出jdbc的Connection对象</li><li>直接得到sql语句，使用jdbc的Connection对象进行对应的CRUD操作</li></ol></li></ul></li><li><p>封装结果集</p><p>将结果封装为java对象返回调用者，因此需要获取返回的结果类型</p></li></ul><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><ul><li><p>查询</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--根据id查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user where id = #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>resultType属性：用于指定结果集的类型。</p><p>parameterType属性：用于指定传入参数的类型。</p><p>sql语句中使用#{}字符：它代表占位符，相当于jdbc部分的?，都是用于执行语句时替换实际的数据。具体的数据是由#{}里面的内容决定的。</p><p>#{}中内容的写法：由于数据类型是基本类型，所以此处可以随意写。</p></li><li><p>插入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--保存用户--></span>&lt;insertid="saveUser" parameterType="com.itheima.domain.User">    insert into user(username,birthday,sex,address)         values(#{username},#{birthday},#{sex},#{address})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>parameterType属性：代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称。sql语句中使用#{}字符：它代表占位符，相当于jdbc部分的?，都是用于执行语句时替换实际的数据。具体的数据是由#{}里面的内容决定的。</p><p>#{}中内容的写法：由于我们保存方法的参数是一个User对象，此处要写User对象中的属性名称。它用的是ognl表达式。</p><p>ognl表达式：它是apache提供的一种表达式语言，全称是：Object Graphic Navigation Language  对象图导航语言它是按照一定的语法格式来获取数据的。语法格式就是使用#{对象.对象}的方式，#{user.username}它会先去找user对象，然后在user对象中找到username属性，并调用getUsername()方法把值取出来。但是我们在parameterType属性上指定了实体类名称，所以可以省略user.而直接写username</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 新增用户后，同时还要返回当前新增用户的id值，因为id是由数据库的自动增长来实现的，所以就相当于我们要在新增后将自动增长auto_increment的值返回。 --></span>&lt;insertid="saveUser" parameterType="USER">    <span class="token comment" spellcheck="true">&lt;!--配置保存时获取插入的id --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select last_insert_id();    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>    insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>更新用户</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--更新用户--></span>&lt;updateid="updateUser" parameterType="com.itheima.domain.User">    update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre></li><li><p>删除用户</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--删除用户--></span>&lt;deleteid="deleteUser" parameterType="java.lang.Integer">    delete from user where id = #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>模糊查询</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--根据名称模糊查询--></span>&lt;selectid="findByName" resultType="com.itheima.domain.User" parameterType="String">    select * from user where usernamelike #{username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><p>#{}表示一个占位符号</p><p>通过#{}可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，#{}可以有效防止sql注入。#{}可以接收简单类型值或pojo属性值。如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。</p></li><li><p>${}表示拼接sql串</p><p>通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换，${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。</p></li></ul></li></ul><ul><li><p>SqlMapConfig.xml</p><ul><li><p>-properties（属性）</p><p>–property</p></li><li><p>-settings（全局配置参数）</p><p>–setting</p></li><li><p>-typeAliases（类型别名）</p><p>–typeAliase</p><p>–package</p></li><li><p>-typeHandlers（类型处理器）</p></li><li><p>-objectFactory（对象工厂）</p></li><li><p>-plugins（插件）</p></li><li><p>-environments（环境集合属性对象）</p><p>–environment（环境子属性对象）</p><ul><li>—transactionManager（事务管理）</li><li>—dataSource（数据源）</li></ul></li><li><p>-mappers（映射器）</p><ul><li>–mapper</li><li>–package</li></ul></li></ul><pre class=" language-xml-dtd"><code class="language-xml-dtd"><configuration>    <!-- 配置properties        可以在标签内部配置连接数据库的信息。也可以通过属性引用外部配置文件信息        resource属性： 常用的            用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。        url属性：            是要求按照Url的写法来写地址            URL：Uniform Resource Locator 统一资源定位符。它是可以唯一标识一个资源的位置。            它的写法：                http://localhost:8080/mybatisserver/demo1Servlet                协议      主机     端口       URI            URI:Uniform Resource Identifier 统一资源标识符。它是在应用中可以唯一定位一个资源的。    -->    <properties url="file:///C:/Users/hawk4/IdeaProjects/MybatisLearning/Mybatis_day02/day02_eesy_01mybatisCRUD/src/main/resources/jdbcConfig.properties">    </properties>    <!--使用typeAliases配置别名，它只能配置domain中类的别名 -->    <typeAliases>        <!--typeAlias用于配置别名。type属性指定的是实体类全限定类名。alias属性指定别名，当指定了别名就再区分大小写         <typeAlias type="com.itheima.domain.User" alias="user"></typeAlias>-->        <!-- 用于指定要配置别名的包，当指定之后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写-->        <package name="com.itheima.domain"/>    </typeAliases>    <!--配置环境-->    <environments default="mysql">        <!-- 配置mysql的环境-->        <environment id="mysql">            <!-- 配置事务 -->            <transactionManager type="JDBC"/>            <!--配置连接池-->            <dataSource type="POOLED">                <property name="driver" value="${jdbc.driver}"/>                <property name="url" value="${jdbc.url}"/>                <property name="username" value="${jdbc.username}"/>                <property name="password" value="${jdbc.password}"/>                <!--<property name="driver" value="com.mysql.jdbc.Driver"/>                <property name="url" value="jdbc:mysql://localhost:3306/eesy"/>                <property name="username" value="root"/>                <property name="password" value="1234"/>-->            </dataSource>        </environment>    </environments>    <!-- 配置映射文件的位置 -->    <mappers>        <!--<mapper resource="com/itheima/dao/IUserDao.xml"></mapper>-->        <!-- package标签是用于指定dao接口所在的包,当指定了之后就不需要在写mapper以及resource或者class了 -->        <package name="com.itheima.dao"/>    </mappers></configuration></code></pre></li><li><p>mybatis中的连接池</p><p>可以减少我们获取连接所消耗的时间</p><p>mybatis连接池提供了3种方式的配置：</p><ul><li><p>配置的位置：<br>主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式。</p></li><li><p>type属性的取值：</p><ul><li><p>POOLED</p><p>采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现</p></li><li><p>UNPOOLED</p><p>采用传统的获取连接的方式，虽然也实现Javax.sql.DataSource接口，但是并没有使用池的思想。</p></li><li><p>JNDI</p><p>采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到DataSource是不一样。注意：如果不是web或者maven的war工程，是不能使用的。</p></li></ul></li></ul></li></ul><h4 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h4><ul><li><p>&lt;if&gt;</p></li><li><p>&lt;where&gt;</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and username = #{userName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and sex = #{userSex}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>&lt;foreach&gt;</p><pre class=" language-xaml"><code class="language-xaml"><!-- 根据queryvo中的Id集合实现查询用户列表 -->    <select id="findUserInIds" resultMap="userMap" parameterType="queryvo">        <include refid="defaultUser"/>        <where>            <if test="ids != null and ids.size()>0">                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">                    #{uid}                </foreach>            </if>        </where>    </select></code></pre></li></ul><ul><li><p>多表查询</p><ul><li><p>一对一查询（多对一</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定义封装account和user的resultMap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountUserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 一对一的关系映射：配置封装user的内容--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询所有账户同时包含用户名和地址信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAllAccount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountuser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select a.*,u.username,u.address from account a , user u where u.id = a.uid;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对多查询</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定义User的resultMap--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAccountMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置user对象中accounts集合的映射 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAccountMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user u left outer join account a on u.id = a.uid    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>多对多查询</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 定义User的resultMap--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置角色集合的映射 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleDesc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_desc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select u.*,r.id as rid,r.role_name,r.role_desc from user u         left outer join user_role ur  on u.id = ur.uid         left outer join role r on r.id = ur.rid    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>延迟加载策略</p><ul><li><p>多对一</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定义封装account和user的resultMap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountUserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 一对一的关系映射：配置封装user的内容        select属性指定的内容：查询用户的唯一标识：        column属性指定的内容：用户根据id查询时，所需要的参数的值        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IUserDao.findById<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountUserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from account    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对多</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定义User的resultMap--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAccountMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置user对象中accounts集合的映射 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IAccountDao.findAccountByUid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAccountMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h4><ul><li><p>缓存是存在于内存中的临时数据。<br>减少和数据库的交互次数，提高执行效率。</p><ul><li>适用于缓存：<br>经常查询并且不经常改变的。<br>数据的正确与否对最终结果影响不大的。</li><li>不适用于缓存：<br>经常改变的数据<br>数据的正确与否对最终结果影响很大的。例如：商品的库存，银行的汇率，股市的牌价。</li></ul></li><li><p>Mybatis中的一级缓存和二级缓存</p><ul><li><p>一级缓存：<br>Mybatis中SqlSession对象的缓存。<br>当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。<br>该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中<br>查询是否有，有的话直接拿出来用。<br>当SqlSession对象消失时，mybatis的一级缓存也就消失了。</p></li><li><p>二级缓存:<br>Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。<br>二级缓存的使用步骤：</p><ol><li><p>让Mybatis框架支持二级缓存（在SqlMapConfig.xml中配置）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--开启user支持二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre></li><li><p>让当前的操作支持二级缓存（在select标签中配置）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 根据id查询用户 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INT<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where id = #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul></li></ul><h4 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h4><pre><code>* 一对一、多对一  ```java  /**  * 查询所有账户，并且获取每个账户所属的用户信息  * @return  */      @Select(&quot;select * from account&quot;)      @Results(id=&quot;accountMap&quot;,value = {          @Result(id=true,column = &quot;id&quot;,property = &quot;id&quot;),          @Result(column = &quot;uid&quot;,property = &quot;uid&quot;),          @Result(column = &quot;money&quot;,property = &quot;money&quot;),          @Result(property = &quot;user&quot;,column = &quot;uid&quot;, one=@One(select=&quot;com.itheima.dao.IUserDao.findById&quot;,fetchType= FetchType.EAGER))      })  List&lt;Account&gt; findAll();  /**  * 根据用户id查询账户信息  * @param userId  * @return  */  @Select(&quot;select * from account where uid = #{userId}&quot;)  List&lt;Account&gt; findAccountByUid(Integer userId);  ```* 一对多  ```java  /**  * 查询所有用户  * @return  */  @Select(&quot;select * from user&quot;)      @Results(id=&quot;userMap&quot;,value={          @Result(id=true,column = &quot;id&quot;,property = &quot;userId&quot;),          @Result(column = &quot;username&quot;,property = &quot;userName&quot;),          @Result(column = &quot;address&quot;,property = &quot;userAddress&quot;),          @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),          @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;),          @Result(property = &quot;accounts&quot;,column = &quot;id&quot;,              many = @Many(select = &quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;,                  fetchType = FetchType.LAZY))      })  List&lt;User&gt; findAll();  /**  * 根据id查询用户  * @param userId  * @return  */  @Select(&quot;select * from user  where id=#{id} &quot;)  @ResultMap(&quot;userMap&quot;)  User findById(Integer userId);   /**   * 根据用户名称模糊查询   * @param username   * @return   */   @Select(&quot;select * from user where username like #{username} &quot;)   @ResultMap(&quot;userMap&quot;)   List&lt;User&gt; findUserByName(String username);  ```* 缓存配置  ```java  @CacheNamespace(blocking = true)  ```</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2020/02/19/springmvc/"/>
      <url>/2020/02/19/springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>三层架构<ul><li>表现层： 也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。 表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。 表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。 表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系） </li><li>业务层： 也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业 务层，但是业务层不依赖 web 层。 业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的， 事务应该放到业务层来控制） </li><li>持久层： 也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进 行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库 中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</li></ul></li><li>MVC模型<ul><li>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写， 是一种用于设计创建 Web 应用程序表现层的模式。</li><li>MVC 中每个部分各司其职： <ul><li>Model（模型）： 通常指的就是我们的数据模型。作用一般情况下用于封装数据。 </li><li>View（视图）： 通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的。 通常视图是依据模型数据创建的。</li><li>Controller（控制器）： 是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的。 它相对于前两个不是很好理解，这里举个例子： 例如： 我们要保存一个用户的信息，该用户信息中包含了姓名，性别，年龄等等。 这时候表单输入要求年龄必须是 1~100 之间的整数。姓名和性别不能为空。并且把数据填充 到模型之中。 此时除了 js 的校验之外，服务器端也应该有数据准确性的校验，那么校验就是控制器的该做 的。 当校验失败后，由控制器负责把错误页面展示给使用者。 如果校验成功，也是控制器负责把数据填充到模型，并且调用业务层实现完整的业务需求。</li></ul></li></ul></li><li>优点<ol><li>清晰的角色划分： <ul><li>前端控制器（DispatcherServlet） 请求到处理器映射（HandlerMapping） </li><li>处理器适配器（HandlerAdapter） </li><li>视图解析器（ViewResolver） 处理器或页面</li><li>控制器（Controller） </li><li>验证器（ Validator） </li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象） </li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。 </li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。 </li><li>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。</li><li>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li>强大的 JSP 标签库，使 JSP 编写更容易。 ………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配 置支持等等。</li></ol></li><li>与Struts2对比<ul><li>共同点： <ul><li>它们都是表现层框架，都是基于 MVC 模型编写的。 </li><li>它们的底层都离不开原始 ServletAPI。 它们处理请求的机制都是一个核心控制器。 </li></ul></li><li>区别： <ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所 以 Spring MVC 会稍微比 Struts2 快些。 </li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便 (JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注 解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。) </li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提 升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li></ul></li></ul></li></ul><h3 id="SpringMVC入门"><a href="#SpringMVC入门" class="headerlink" title="SpringMVC入门"></a>SpringMVC入门</h3><ul><li>SpringMVC执行流程原理</li></ul><img src="../笔记图片/springmvc执行流程原理.jpg" alt="springmvc执行流程原理" style="zoom: 67%;" ><ul><li><p>组件</p><ul><li><p>DispatcherServlet：前端控制器</p><ul><li>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</li></ul></li><li><p>HandlerMapping：处理器映射器 </p><ul><li>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li></ul></li><li><p>Handler：处理器 </p><ul><li>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。 </li></ul></li><li><p>HandlAdapter：处理器适配器 </p><ul><li>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理 器进行执行。 </li></ul></li><li><p>View Resolver：视图解析器 </p><ul><li>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 </li></ul></li><li><p>View：视图 </p><ul><li>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView 等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。</li></ul></li><li><p>&lt;mvc:annotation-driven&gt;</p><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC 的三大组件。 使用&lt;mvc:annotation-driven&gt;自动加载RequestMappingHandlerMapping（处理映射器）和RequestMappingHandlerAdapter（ 处 理 适 配 器 ）,可 用在SpringMVC.xml配置文件中使用 &lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。它就相当于在xml 中配置了：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 相当于 如下配置--></span><span class="token comment" spellcheck="true">&lt;!-- Begin --></span><span class="token comment" spellcheck="true">&lt;!-- HandlerMapping --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- HandlerAdapter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- HadnlerExceptionResolvers --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- End --></span></code></pre></li></ul></li><li><p>RequestMapping注解</p><ul><li><p>作用： 用于建立请求 URL 和处理请求方法之间的对应关系。</p></li><li><p>出现位置： </p><ul><li><p>类上： 请求 URL 的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。 它出现的目的是为了使我们的 URL 可以按照模块化管理: </p><p>例如</p><p>账户模块： </p><p>/account/add </p><p>/account/update </p><p>/account/delete … </p><p>订单模块： </p><p>/order/add </p><p>/order/update </p><p>/order/delete </p><p>前面的部分就是把 RequsetMappding 写在类上，使我们的 URL 更加精细。 </p></li><li><p>方法上： 请求 URL 的第二级访问目录。 </p></li></ul></li><li><p>属性： </p><ul><li><p>value：用于指定请求的 URL。它和 path 属性的作用是一样的。 </p></li><li><p>method：用于指定请求的方式。 </p></li><li><p>params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的 key 和 value 必须和 配置的一模一样。 </p><p>例如： </p><p>params = {“accountName”}，表示请求参数必须有 accountName </p><p>params = {“moeny!100”}，表示请求参数中 money 不能是 100。 </p></li><li><p>headers：用于指定限制请求消息头的条件。</p></li></ul></li></ul></li><li><p>流程小结</p><ol><li>创建工程，导入坐标 </li><li>在web.xml中配置前端控制器（启动服务器，加载springmvc.xml配置文件） </li><li>编写springmvc.xml配置文件 </li><li>编写index.jsp的页面，发送请求</li><li>编写Controller类，编写方法（@RequestMapping(path=”/hello”)），处理请求</li><li>编写配置文件（开启注解扫描），配置视图解析器 </li><li>执行的流程</li><li>@RequestMapping注解</li></ol></li></ul><h3 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h3><ul><li><p>请求参数的绑定说明 </p><ul><li><p>绑定机制 </p><ol><li>表单提交的数据都是k=v格式的 username=haha&amp;password=123 </li><li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</li><li>要求：提交表单的name和参数的名称是相同的 </li></ol></li><li><p>支持的数据类型 </p><ol><li><p>基本数据类型和字符串类型 </p><ul><li>提交表单的name和参数的名称是相同的</li><li>区分大小写 </li></ul></li><li><p>实体类型（JavaBean）</p><ul><li><p>提交表单的name和JavaBean中的属性名称需要一致</p></li><li><p>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性 </p><p>例如： address.name </p></li></ul></li><li><p>集合数据类型（List、map集合等） </p></li><li><p>给集合属性数据封装</p><ul><li>JSP页面编写方式：list[0].属性</li></ul></li></ol></li><li><p>请求参数中文乱码的解决 </p><ul><li><p>在web.xml中配置Spring提供的过滤器类</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置解决中文乱码的过滤器--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>自定义类型转换器 </p><ul><li><p>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明 Spring框架内部会默认进行数据类型转换。 </p></li><li><p>如果想自定义数据类型转换，可以实现Converter的接口 </p><ol><li><p>自定义类型转换器</p></li><li><p>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置自定义类型转换器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul></li></ul></li></ul><h3 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h3><h4 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>作用：把请求中的指定名称的参数传递给控制器中的形参赋值 </li><li>属性 <ul><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li></ul></li></ul><h4 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>作用：用于获取请求体的内容（注意：get方法不可以） </li><li>属性<ul><li>required：是否必须有请求体，默认值是true</li></ul></li></ul><h4 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testPathVariable/{sid}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sid"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符 </p></li><li><p>属性 </p><ul><li>value：指定url中的占位符名称 </li></ul></li><li><p>Restful风格的URL </p><p>请求路径一样，可以根据不同的请求方式去执行后台的不同方法 </p><p>restful风格的URL优点 </p><ul><li>结构清晰 </li><li>符合标准 </li><li>易于理解 </li><li>扩展方便</li></ul></li></ul><h4 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testRequestHeader"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return "success";</span>    <span class="token comment" spellcheck="true">// response.sendRedirect(request.getContextPath()+"/anno/testCookieValue");</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/param.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>作用：获取指定请求头的值</li><li>属性 <ul><li>value：请求头的名称</li></ul></li></ul><h4 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>作用：用于获取指定cookie的名称的值 </li><li>属性 <ul><li>value：cookie的名称</li></ul></li></ul><h4 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h4><ul><li><p>作用 </p><ul><li>出现在方法上：表示当前方法会在控制器方法执行前线执行。 </li><li>出现在参数上：获取指定的数据给参数赋值。 </li></ul></li><li><p>应用场景 </p><ul><li>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</li></ul></li><li><p>案例</p><ul><li><p>修饰的方法有返回值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ModelAttribute</span><span class="token keyword">public</span> User <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象</span>   User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>修饰的方法无返回值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ModelAttribute</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象</span>   User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="SessionAttributes注解"></a>SessionAttributes注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testSessionAttributes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testSessionAttributes</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 底层会存储到request域对象中</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"美美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/getSessionAttributes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getSessionAttributes</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String msg <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/delSessionAttributes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">delSessionAttributes</span><span class="token punctuation">(</span>SessionStatus status<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>作用：用于多次执行控制器方法间的参数共享 </li><li>属性 <ul><li>value：指定存入属性的名称</li></ul></li></ul><h3 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h3><h4 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h4><ul><li><p>返回字符串</p><ul><li><p>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello SpringMVC!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 跳转到XX页面</span>   <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>应用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 请求参数的绑定    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/initUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">initUpdate</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟从数据库中查询的数据</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><h3>执行成功</h3>    ${user.username}    ${user.password}    ${user.age}</code></pre></li></ul></li><li><p>返回值是void </p><ul><li><p>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。</p><p>默认会跳转到@RequestMapping(value=”/initUpdate”) initUpdate的页面。 </p></li><li><p>可以使用请求转发或者重定向跳转到指定的页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVoid"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testVoid</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testVoid方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 编写请求转发的程序</span>   <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);</span>   <span class="token comment" spellcheck="true">// 重定向</span>   <span class="token comment" spellcheck="true">// response.sendRedirect(request.getContextPath()+"/index.jsp");</span>   <span class="token comment" spellcheck="true">// 设置中文乱码</span>   response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 直接会进行响应</span>   response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>返回值是ModelAndView对象 </p><ul><li><p>ModelAndView对象是Spring提供的一个对象，可以用来调整具体的JSP视图</p></li><li><p>应用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ModelAndView <span class="token function">testModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建ModelAndView对象</span>    ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAndView方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟从数据库中查询出User对象</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"小凤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 跳转到哪个页面，过程中会使用视图解析器</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="SpringMVC框架提供的转发和重定向"><a href="#SpringMVC框架提供的转发和重定向" class="headerlink" title="SpringMVC框架提供的转发和重定向"></a>SpringMVC框架提供的转发和重定向</h4><ul><li><p>forward请求转发 </p><ul><li><p>进行请求转发</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testForwardOrRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testForwardOrRedirect方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/pages/success.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>redirect重定向</p><ul><li><p>进行重定向</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testForwardOrRedirect方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>ResponseBody响应json数据</p><ul><li><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而 不能被使用。</p><p>解决方式就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加mvc:resources标签配置不过滤 </p><ol><li><p>location元素表示webapp目录下的包下的所有文件 </p></li><li><p>mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</p><pre class=" language-jsp"><code class="language-jsp"><!-- 设置静态资源不过滤 --><mvc:resources location="/css/" mapping="/css/**"/> <!-- 样式 --><mvc:resources location="/images/" mapping="/images/**"/> <!-- 图片 --><mvc:resources location="/js/" mapping="/js/**"/> <!-- javascript --></code></pre></li></ol></li><li><p>使用@RequestBody获取请求体数据</p><pre class=" language-jsp"><code class="language-jsp"><script>// 页面加载，绑定单击事件    $(function(){        $("#btn").click(function(){            // alert("hello btn");            // 发送ajax请求            $.ajax({                // 编写json格式，设置属性和值                url:"user/testAjax",                contentType:"application/json;charset=UTF-8",                data:'{"username":"hehe","password":"123","age":30}',                dataType:"json",                type:"post",                success:function(data){                    // data服务器端响应的json的数据，进行解析                    alert(data);                }            });        });    });</script></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>使用@RequestBody注解把json的字符串转换成JavaBean的对象</p></li><li><p>使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</p><p>要求方法需要返回JavaBean的对象</p><pre class=" language-jsp"><code class="language-jsp"><script>// 页面加载，绑定单击事件    $(function(){        $("#btn").click(function(){            // alert("hello btn");            // 发送ajax请求            $.ajax({                // 编写json格式，设置属性和值                url:"user/testAjax",                contentType:"application/json;charset=UTF-8",                data:'{"username":"hehe","password":"123","age":30}',                dataType:"json",                type:"post",                success:function(data){                    // data服务器端响应的json的数据，进行解析                    alert(data);                    alert(data.username);                    alert(data.password);                    alert(data.age);                }            });        });    });</script></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 做响应，模拟查询数据库</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 做响应</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h3><h4 id="传统文件上传"><a href="#传统文件上传" class="headerlink" title="传统文件上传"></a>传统文件上传</h4><ul><li><p>导入文件上传的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写文件上传的JSP页面</p><pre class=" language-jsp"><code class="language-jsp"><h3>文件上传</h3><form action="user/fileupload" method="post" enctype="multipart/form-data">    选择文件：<input type="file" name="upload"/><br/>    <input type="submit" value="上传文件"/></form></code></pre></li><li><p>编写文件上传的Controller控制器</p></li></ul><h4 id="SpringMVC方式文件上传"><a href="#SpringMVC方式文件上传" class="headerlink" title="SpringMVC方式文件上传"></a>SpringMVC方式文件上传</h4><ul><li><p>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的 name属性名称相同</p><ul><li><p>配置文件解析器对象</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置文件解析器对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/fileupload2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">fileupload2</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"springmvc文件上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用fileupload组件完成文件上传</span>    <span class="token comment" spellcheck="true">// 上传的位置</span>    String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断，该路径是否存在</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建该文件夹</span>    file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 说明上传文件项</span>    <span class="token comment" spellcheck="true">// 获取上传文件的名称</span>    String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把文件的名称设置唯一值，uuid</span>    String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filename <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成文件上传</span>    upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="跨服务器方式的文件上传"><a href="#跨服务器方式的文件上传" class="headerlink" title="跨服务器方式的文件上传"></a>跨服务器方式的文件上传</h4><ul><li><p>分服务器的目的</p><ul><li><p>在实际开发中，我们会有很多处理不同功能的服务器。</p><p>例如： </p><ul><li>应用服务器：负责部署我们的应用 </li><li>数据库服务器：运行我们的数据库 </li><li>缓存和消息服务器：负责处理大并发访问的缓存和消息 </li><li>文件服务器：负责存储用户上传文件的服务器。</li></ul></li></ul></li><li><p>搭建图片服务器 </p></li><li><p>编写控制器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/fileupload3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">fileupload3</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跨服务器文件上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义上传文件服务器路径</span>    String path <span class="token operator">=</span> <span class="token string">"http://localhost:9090/uploads/"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 说明上传文件项</span>    <span class="token comment" spellcheck="true">// 获取上传文件的名称</span>    String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把文件的名称设置唯一值，uuid</span>    String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filename <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建客户端的对象</span>    Client client <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 和图片服务器进行连接</span>    WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上传文件</span>    webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h3><ul><li><p>异常处理思路</p><ul><li>系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</li><li>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端 控制器交由异常处理器进行异常处理</li></ul></li><li><p>异常处理方式</p><ul><li><p>自定义异常类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 存储提示信息的</span>   <span class="token keyword">private</span> String message<span class="token punctuation">;</span>   <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> message<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>自定义异常处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 获取到异常对象</span>       SysException e <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       e <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span>ex<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 创建ModelAndView对象</span>       ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> mv<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置异常处理器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置异常处理器--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul></li></ul><h3 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h3><h4 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h4><ul><li>Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。 用户可以自己定义一些拦截器来实现特定的功能。 </li><li>拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。 </li><li>区别： <ul><li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。 </li><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。 </li><li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。 </li><li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦 截的。 </li></ul></li><li>它也是 AOP 思想的具体应用。 我们要想自定义拦截器， 要求必须实现：HandlerInterceptor 接口</li></ul><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><ul><li><p>编写拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...前1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...最后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置拦截器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置拦截器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 用于指定拦截的 url --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 用于指定排除的 url        &lt;mvc:exclude-mapping path=""/>        --></span>        <span class="token comment" spellcheck="true">&lt;!--配置拦截器对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="拦截器的细节"><a href="#拦截器的细节" class="headerlink" title="拦截器的细节"></a>拦截器的细节</h4><ul><li><p>preHandle方法是controller方法执行前拦截的方法</p><ul><li>可以使用request或者response跳转到指定的页面</li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li><li>return false不放行，不会执行controller中的方法。</li></ul></li><li><p>postHandle是controller方法执行后执行的方法，在JSP视图执行前。</p><ul><li>可以使用request或者response跳转到指定的页面</li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示</li></ul></li><li><p>postHandle方法是在JSP执行后执行</p><ul><li>request或者response不能再跳转页面了</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/02/19/mysql-ji-chu/"/>
      <url>/2020/02/19/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li><p>概念：</p><ul><li>数据是数据库中储存的基本对象，数据的含义为数据的语义</li><li>数据库DB：长期储存、有组织、可共享、大量数据：长期储存、有组织、可共享、大量数据<ul><li>按一定的数据模型组织、描述和储存；可共享；冗余度较小；数据独立性较高；易扩展</li></ul></li></ul></li><li><p>数据库管理系统DBMS</p><ul><li>数据定义，数据组织、储存和管理，数据操纵</li><li>主要功能：运行管理、建立和维护</li></ul></li><li><p>DBMS特点</p><ul><li>数据放到表中，表再放在库中</li><li>一个数据库中可以有多个表，每个表都有一个名字标识，具有唯一性</li><li>表具有一些特性，定义了数据再表中如何储存，类似java中“类”</li><li>表由列组成，也称字段，所有表都是由一个或多个列组成的，每一列类似java中的”属性“</li><li>表中的数据是按行储存的，每一行类似java中的“对象”</li></ul></li><li><p>Mysql启动： mysql -h 主机名 -P端口号 -u 用户名 -p 密码</p></li></ul><pre><code>show databases;use 库名;show tables;show tables from 库名;create table 表名(    列名 列类型,    列名 列类型,    ...);</code></pre><ul><li>查看表结构： desc 表名</li><li>mysql不区分大小写，但关键字大写，表明列名小写</li></ul><h2 id="1-DQL语言"><a href="#1-DQL语言" class="headerlink" title="1.DQL语言"></a>1.DQL语言</h2><p>做查询时前面添加命令 USE 库名;</p><p>查询时，先确认是否所需数据都在一张表里，决定是否连接表，再进行筛选，注意GROUP BY前后筛选</p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><ul><li><p>select 查询列表 from 表名</p></li><li><p>查询列表可以是：表中的字段、常量值、表达式、函数</p></li><li><p>查询的结果是一个虚拟的表格</p><pre class=" language-mysql"><code class="language-mysql">-- 查询表中的单个字段SELECT last_name FROM employees;-- 查询表中的多个字段SELECT last_name,salary,email FROM employees;-- 查询表中的所有字段SELECT * FROM employees;-- 星号不可以自定义顺序-- 查询常量值SELECT 100; SELECT 'john';-- 查询表达式SELECT 100%98；-- 查询函数SELECT version();-- 可以起别名 别名可加双引号避免歧义报错SELECT 100%98 AS 结果;SELECT last_name AS 姓,first_name AS 名 FROM employees;SELECT last_name 姓,first_name 名 FROM employees;-- 去重SELECT DISTINCT department_id FROM employees;-- 加号-- mysql中对字符型进行转换，转换成功则继续运算，否则字符型转化为0，如果有一方为null，则结果输出nullSELECT CONCAT('a','b','c') AS 结果; 则输出 abcIFNULL(字段,数值)</code></pre></li></ul><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre><code>SELECT 查询列表FROM 表名WHERE 筛选条件</code></pre><ul><li><p>支持条件运算符（包括模糊查询）、逻辑表达式AND NOT OR</p><ul><li><p>模糊查询：like、between and、in、is null</p><ul><li><p>like</p><p>通配符：%-&gt;0-n个任意字符、一个任意字符用\转义，</p><p>或 <code>last_name LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;;($可换成任意字符充当转义)</code></p></li><li><p>between and 包含为闭区间 </p></li><li><p>in job_id(‘’,’’,’’);</p></li><li><p>is null/is not null -&gt;由于= &lt;&gt; 不可判断null值</p></li><li><p>&lt;=&gt;安全等于（可以判断null</p></li></ul></li></ul></li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><pre class=" language-mysql"><code class="language-mysql">SELECT 查询列表 FROM 表 where 筛选条件 ORDER BY 排序列表(ASC|DESC);</code></pre><ul><li><p>特点：默认升序；</p><p>order by 支持单个多个字段、表达式、函数、别名；一般放在查询语句最后（只有Limit 子句在其后</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM employees ORDER BY salary DESC;SELECT * FROM employees ORDER BY salary ASC;-- 按年薪高低显示员工的信息和 年薪按表达式顺序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪 FROM employees ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;-- 按年薪高低显示员工的信息和 年薪按别名顺序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪FROM employees ORDER BY 年薪 DESC;-- 按函数排序SELECT LENGTH(last_name) 字节长度，last_name,salary FROM employees ORDER BY LENGTH(last_name) DESC;-- 按多个字段排序SELECT * FROM employees ORDER BY salary ASC,employees_id DESC;</code></pre></li></ul><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><p>类似于方法</p><ul><li><p>单行函数：concat、length、ifnull等</p><ul><li><p>字符函数</p><ul><li>SELECT LENGTH 注意这里是字节长度</li><li>CONCAT( , , )</li><li>UPPER,LOWER</li><li>SUBSTR、SUBSTRING sql中索引从1开始，substr的第三个参数为长度类似C++substr</li><li>INSTR 返回子串中出现的第一次起始位置，否则返回0</li><li>TRIM （’a’ FROM ‘aaaaneawwwaaaa’）则仅去掉前后两端的a</li><li>LPAD (‘test’,10,’*’) output 则左边用星号填充至10个字符（如果输出长度小于原字符则截断</li><li>RPAD同理</li><li>REPLACE(‘test’,’e’,’s’)</li></ul></li><li><p>数学函数</p><ul><li>ROUND四舍五入 </li><li>SELECT ROUND(1.45);</li><li>CEIL向上取整</li><li>FLOOR返回&lt;=该参数的最大整数</li><li>TRUNCATE截断 SELECT TRUNCATE(1.555，1)保留一位小数</li><li>MOD取余</li></ul></li><li><p>日期函数</p><ul><li>SELECT NOW();返回当前系统日期+时间</li><li>SELECT CURDATE();返回当前系统日期</li><li>SELECT CURTIME();返回当前时间</li><li>SELECT year(),month(),day(),hour(),minute(),second() 获取年月日时分秒</li><li>SELECT MONTHNAME(NOW());</li><li>str_to_date将日期格式的字符串转汉城指定格式的日期  STR_TO_DATE(‘9-13-1999’,’%m-%d=%Y’);</li><li>date_format:将日期转换成字符</li><li>SELECT DATE_FORMAT(NOW(),’%y年%m月%d日’) AS out_put;</li></ul></li><li><p>其他函数</p><ul><li>SELECT VERSION();                    </li><li>SELECT DATABASE();                </li><li>SELECT USER();</li><li>SELECT PASSWORD(‘’);//字符加密</li></ul></li><li><p>流程控制函数</p><ul><li><p>IF类似三目运算符?:</p></li><li><p>SELECT IF(10&gt;5,’大’，’小’);</p></li><li><p>CASE</p><pre class=" language-mysql"><code class="language-mysql">-- 类似switchCASE department_idWHEN 30 THEN salary*1.1WHEN 40 THEN salary*1.2ELSE salaryEND AS 新工资FROM employees;-- 类似多重if-elseCASEWHEN salary>20000 THEN 'A'WHEN salary>15000 THEN 'B'ELSE 'D'END AS 工资级别FROM employees;</code></pre></li></ul></li><li><p>分组函数：</p><p>用于统计又称聚合、统计函数，SUM、AVG、MAX、MIN、COUNT</p><ul><li><p>SUM、AVG对数值型处理</p></li><li><p>MAX、MIN、COUNT对任何类型可处理</p></li><li><p>所有的分组函数都忽略NULL值；都可以和DISTINCT搭配实现去重</p></li><li><p>COUNT详解</p><pre class=" language-mysql"><code class="language-mysql">-- 统计行数SELECT COUNT(*) FROM employees;SELECT COUNT(1) FROM employees;</code></pre><p>MYISAM引擎COUNT(*)效率高INNODB两者差不多，比COUNT(字段)效率高<br>和分组函数一同查询的字段要求是group by后的字段<br>DATEDIFF 计算两参数差值</p></li></ul></li></ul></li></ul><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre><code>SELECT 分组函数，列FROM 表WHERE 删选条件GROUP BY 分组的列表ORDER BY 子句</code></pre><ul><li><p>案例</p><pre class=" language-mysql"><code class="language-mysql">SELECT AVG(salary)，department_idFROM employeesWHERE email LIKE '%a%'GROUP BY department_id;SELECT COUNT(*),department_idFROM employeesGROUP BY department_idHAVING COUNT(*)>2;SELECT MAX(salary),job_idFROM employeesWHERE commission_pct IS NOT NULLGROUP BY job_idHAVING MAX(salary)>12000SELECT MIN(salary),manager_idFROM employeesWHERE department_id>102GROUP BY manager_idHAVING MIN(salary)>5000;</code></pre></li><li><p>特点</p><p>筛选条件 两者筛选数据源不同 </p><p>分组前筛选 筛选的是原始表</p><p>分组后筛选 筛选的是分组后的结果集</p><p>能分组前筛选的尽量分组前筛选（性能考虑</p></li><li><p>GROUP BY</p><p>支持多分组 支持按表达式或函数分组</p><pre class=" language-mysql"><code class="language-mysql">-- 按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数>5的有哪些SELECT COUNT(*),LENGTH(last_name) len_nameFROM employeesGROUP BY LENGTH(last_name)HAVING COUNT(*)>5;</code></pre></li></ul><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>又称多表查询</p><pre class=" language-mysql"><code class="language-mysql">SELECT 查询列表FROM 表1 别名 连接类型JOIN 表2 别名ON 连接条件</code></pre><ul><li><p>内连接 INNER JOIN</p><ul><li><p>等值连接</p><pre class=" language-mysql"><code class="language-mysql">SELECT NAME,boyName FROM boys,beautyWHERE beauty.boyfriend_id=boys.id;</code></pre><ul><li><p>查询员工名、工种号、工种名 可以为表起别名</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,employees.job_id,job_titleFROM employees,jobsWHERE employees.`job_id`=jobs.`job_id`;</code></pre></li><li><p>可以加筛选</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,department_name                        FROM employees,departmentsWHERE employees.`department_id`=departments.department_idAND employees.`commission_pct` IS NOT NULL;</code></pre></li><li><p>可以加分组</p><pre class=" language-mysql"><code class="language-mysql">-- 查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资SELECT department_name,d.manager_id,MIN(e.salary)FROM employees e,departments dWHERE e.department_id =d.department_idand e.commission_pct is not nullGROUP BY department_name,d.manager_id;</code></pre></li><li><p>可以加排序</p><pre class=" language-mysql"><code class="language-mysql">-- 查询每个工种的工种名和员工的个数,并按员工个数降序SELECT    job_title,    count(*)FROM    employees e,    jobs jWHERE    e.job_id = j.job_idGROUP BY    job_titleORDER BY    count(*) DESC</code></pre></li><li><p>可以进行三表连接</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,department_name,cityFROM employees e,departments d,locations lWHERE e.`department_id`=d.`department_id`AND d.`location_id`=l.`location_id`AND city LIKE 's%'ORDER BY department_name DESC;</code></pre></li><li><p>也可以加分组后筛选</p></li></ul></li><li><p>非等值连接</p><pre class=" language-mysql"><code class="language-mysql">-- 查询员工的工资和工资级别SELECT salary,grade_levelFROM employees e,job_grades gWHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`;</code></pre></li><li><p>自连接</p><pre class=" language-mysql"><code class="language-mysql">-- 查询员工名和上级的名称SELECT e.employee_id,e.last_name,m.employee_id,m.last_nameFROM employees e,employees mWHERE e.`manager_id`=m.`employee_id`;</code></pre></li><li><p>注意</p><ul><li>多表连接的结果为多表的交集部分</li><li>n表连接至少需要n-1个连接条件</li><li>多表的顺序无要求，一般需起别名</li><li>可搭配其他子句使用</li></ul></li><li><p>总结</p><pre class=" language-mysql"><code class="language-mysql">SELECT 查询列表FROM 表1 别名1，表2 别名2（等值连接、非等值连接 / FROM 表 别名1，表 别名2（自连接WHERE （非）等值的连接条件AND 筛选条件GROUP BY 分组字段HAVING 分组后的筛选ORDER BY 排序字段</code></pre></li></ul></li><li><p>外连接：连接类型outer</p><p>用与查询一个表有，另一个表没有的记录</p><ul><li><p>左外连接</p><pre class=" language-mysql"><code class="language-mysql">SELECT <select_list>FROM ALEFT OUTER JOIN BON A.key=B.keyWHERE B.key IS NULL;</code></pre><p>左外连接还返回左表中不符合连接条件单符合查询条件的数据行</p></li><li><p>右外连接</p><pre class=" language-mysql"><code class="language-mysql">SELECT <select_list>FROM BRIGHT OUTER JOIN AON A.key=B.keyWHERE A.key IS NULL;</code></pre><p>右外连接还返回右表中不符合连接条件单符合查询条件的数据行</p></li><li><p>交叉连接</p><pre class=" language-mysql"><code class="language-mysql">SELECT b.* ,bo.*FROM beauty bCROSS JOIN boys bo;-- 结果为笛卡尔乘积结果</code></pre></li></ul></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>出现在其他语句中的select语句，成为子查询或内查询</p></blockquote><table><thead><tr><th>位置</th><th>子查询类型</th></tr></thead><tbody><tr><td>select后</td><td>标量子查询</td></tr><tr><td>FROM后</td><td>表子查询</td></tr><tr><td>WHERE或HAVING后</td><td>标量子查询、列子查询、行子查询</td></tr><tr><td>EXISTS后</td><td>表子查询</td></tr></tbody></table><table><thead><tr><th>类型</th><th>特征</th></tr></thead><tbody><tr><td>标量子查询</td><td>结果集只有一行一列</td></tr><tr><td>列子查询</td><td>结果集只有一行多列</td></tr><tr><td>行子查询</td><td>结果集有一行多列</td></tr><tr><td>表子查询</td><td>结果集一般为多行多列</td></tr></tbody></table><ul><li><p>SELECT后面</p><pre class=" language-mysql"><code class="language-mysql">-- 查询每个部门的员工个数SELECT d.*,(SELECT COUNT(*) FROM employees WHERE employees.`department_id`=d.`department_id`)FROM departments d</code></pre></li><li><p>FROM后面</p><pre class=" language-mysql"><code class="language-mysql">-- 查询每个部门的平均工资的工资等级SELECT t1.*,t2.`grade_level`FROM(    SELECT department_id,AVG(salary) avg_salary     FROM employees    GROUP BY department_id) t1 INNER JOIN job_grades t2ON t1.avg_salary BETWEEN t2.`lowest_sal` AND t2.`highest_sal`</code></pre></li><li><p>WHERE和HAVING后</p><ul><li><p>标量子查询    单行</p><pre class=" language-mysql"><code class="language-mysql">-- 谁的工资比abel高SELECT e.`last_name` FROM employees e WHERE e.`salary`>(    SELECT salary     FROM employees     WHERE last_name = 'Abel')；</code></pre></li><li><p>列子查询        多行</p><pre class=" language-mysql"><code class="language-mysql">-- 返回location_id是1400或1700的部门中的所有员工姓名SELECT last_nameFROM employeesWHERE department_id IN(    SELECT DISTINCT department_id    FROM departments    WHERE location_id IN(1400,1700));-- 返回其他工种中比job_id为`IT_PROG`工种任一工资低的员工的员工号、姓名、job_id、salarySELECT last_name,employee_id,job_id,salary FROM employees WHERE salary<ALL(     SELECT DISTINCT salary     FROM employees     WHERE job_id = 'IT_PROG' ) AND job_id<>'IT_PROG';</code></pre></li><li><p>行子查询         多列多行</p><ul><li><p>特点</p><p>子查询放在小括号内、子查询一帮放在条件的右侧、标量子查询一般搭配着单行操作符使用<br>列子查询，一般搭配着多行操作符使用</p></li></ul><pre class=" language-mysql"><code class="language-mysql">-- 员工编号最小并且工资最高的员工信息SELECT *FROM employeesWHERE (employee_id,salary)=(    SELECT MIN(employee_id),MAX(salary)    FROM employees);-- 或用以下形式SELECT *FROM employeesWHERE employee_id=(    SELECT MIN(employee_id)    FROM employees) AND salary=(    SELECT MAX(salary)    FROM employees);</code></pre></li></ul></li><li><p>EXISTS后面：相关子查询</p><pre class=" language-mysql"><code class="language-mysql">SELECT EXISTS(    SELECT employee_id     FROM employees      WHERE salary=30000);</code></pre></li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>当显示的数据，一页显示不全，需要分页提交sql请求</p><pre class=" language-mysql"><code class="language-mysql">SELECT 查询列表FROM 表连接类型 JOIN 表2ON 连接条件WHERE 筛选条件GROUP BY 分组字段HAVING 分组后的筛选ORDER BY 排序的字段LIMIT offset,size;-- 每页公式为 SELECT 查询列表 FROM 表 LIMIT (page-1)*size,size;</code></pre><h3 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h3><p>将多条查询语句合并成一个结果</p><ul><li>应用场景     多个表没有连接关系，但是列数相同的表</li><li>特点   多条查询语句列数一致、字段名和类型顺序要一致、自动去重（取消去重则UNION ALL）</li></ul><h2 id="2-DML语言"><a href="#2-DML语言" class="headerlink" title="2.DML语言"></a>2.DML语言</h2><h3 id="插入语句insert"><a href="#插入语句insert" class="headerlink" title="插入语句insert"></a>插入语句insert</h3><pre class=" language-mysql"><code class="language-mysql">-- 前者支持插入多行VALUES(),(),();后者不支持-- 前者支持子查询 SELECT ,后者不支持insert into 表名（列名，...）values(值，...)或insert into 表名set 列名=值,列名=值;</code></pre><ul><li><p>插入的类型要与列的类型一致或兼容</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)VALUES(13,'唐艺昕','女','1990-4-23','18988888888',NULL,2);</code></pre></li><li><p>注意</p><ul><li>不可为NULL的值可以写NULL或省略</li><li>可以省略列名，但是此时NULL值不能省略写</li></ul></li></ul><h3 id="修改语句update"><a href="#修改语句update" class="headerlink" title="修改语句update"></a>修改语句update</h3><pre class=" language-mysql"><code class="language-mysql">-- 修改单表的记录update 表名set 列=新值,列=新值,...where 筛选条件;-- 修改多表的记录update 表1inner|left|right join 表2set 列=值,列=值where 筛选条件;-- ExampleUPDATE boys boINNER JOIN beauty b ON bo.`id`=b.`boyfriend_id`SET b.`phone`=`114`WHERE bo.`boyName`=`张无忌`;UPDATE boys boRIGHT JOIN beauty b ON bo.`id`=b.`boyfriend_id`SET b.`boyfriend_id`=2WHERE bo.`id` IS NULL;</code></pre><h3 id="删除语句delete"><a href="#删除语句delete" class="headerlink" title="删除语句delete"></a>删除语句delete</h3><pre class=" language-mysql"><code class="language-mysql">-- 单表删除delete from 表1,表2inner|left|right join 表2on 连接条件where 筛选条件;            -- 多表删除truncate table 表名;</code></pre><ul><li>注意<ul><li>如果删除的表中有自增长列，delete后再插入数据，值从断点开始，ertruncate从1开始</li><li>truncate 没有返回值，delete有返回值</li><li>truncate不能回滚，delete可以回滚</li></ul></li></ul><h2 id="3-DDL语言"><a href="#3-DDL语言" class="headerlink" title="3.DDL语言"></a>3.DDL语言</h2><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><ul><li>创建</li></ul><pre class=" language-mysql"><code class="language-mysql">create database IF NOT EXISTS 库名;</code></pre><ul><li>修改 (一般不做修改 </li></ul><pre class=" language-mysql"><code class="language-mysql">-- 可改字符集：ALTER DATABASE books CHARACTER SET gbk;</code></pre><ul><li>删除</li></ul><pre class=" language-mysql"><code class="language-mysql">DROP DATABASE IF EXISTS books;</code></pre><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><ul><li><p>创建</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE 表名(    列名 列的类型(长度)约束,    列名 列的类型(长度)约束,    列名 列的类型(长度)约束,);CREATE TABLE book(    id INT,#编号    bName VARCHAR(20),    authorId INT,    publishDate DATETIME);</code></pre></li><li><p>修改</p><pre class=" language-mysql"><code class="language-mysql">-- 修改列名ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;-- 修改列的类型或约束ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;-- 添加新列ALTER TABLE author ADD COLUMN annual DOUBLE;-- 删除列ALTER TABLE author DROP COLUMN annual;-- 修改表名ALTER TABLE author RENAME TO book_author;</code></pre></li><li><p>删除</p><pre class=" language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS book_author;-- 通用写法DROP DATABASE IF EXISTS 旧库名;CREATE DATABASE 新库名;DROP TABLE IF EXISTS 旧表名;CREATE TABLE 表名();</code></pre></li><li><p>表的复制</p><pre class=" language-mysql"><code class="language-mysql">-- 仅仅复制表的结构CREATE TABLE LIKE author;复制表的结构+数据CREATE TABLE copy2SELECT * FROM author;-- 仅复制某些字段CREATE TABLE copy4SELECT id，au_nameFROM authorWHERE 0;</code></pre></li></ul><h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><blockquote><p>选择类型越简单越好，能保存数值的类型越小越好</p></blockquote><ul><li><p>整形</p><ul><li>用UNSIGNED标识有无符号，超范围则为临界值，如果不设置长度，会有默认的长度</li><li>长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配ZEROFILL</li></ul></li><li><p>小数</p><ul><li>浮点数  float(M,D) double(M,D)</li><li>定点数  DEC(M,D) DECIMAL(M,D)</li><li>特点：M为总位数，D为小数位数，默认float、double符合范围即可，decimal默认10,0    </li></ul></li><li><p>字符型</p><ul><li><p>较短文本char、varchar</p><p>char固定长度字符M默认为1，varchar可变长度字符M无默认必须指定，char性能高</p></li><li><p>较长文本test、blob</p></li></ul></li><li><p>枚举</p></li><li><p>集合</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE tab_set(    s1 SET/ENUM('a','b','c','d'));        </code></pre><p>集合插入多个，枚举插入一个</p></li><li><p>日期型</p><p>date、datetime、timestamp、time、year<br>datetime从1000-1-1到9999-12-31<br>timestamp则和实际时区有关，反应实际时间，且受mysql版本和sqlmode的影响，范围1970某时到2038某时</p></li></ul><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><p>限制表中的数据，为了保证表中的数据的准确性和可靠性</p><ul><li><p>六大约束</p><ul><li>NOT NULL</li><li>DEFAULT：保证该字段有默认值</li><li>PRIMARY KEY：主键，用于保证该字段的值的唯一性，并且非空</li><li>UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空</li><li>CHECK:（mysql中不支持）</li><li>FOREIGN KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自主表的关联列的值，在从表添加外键约束，用于引用主表中的某列的值，比如各种编号</li></ul></li><li><p>添加约束时机</p><ul><li><p>创建表时</p><ul><li><p>列级约束<br>直接在字段名和类型后面追加约束类型，六种语法都支持，但外键无效果</p></li><li><p>表级约束<br>六种中除了非空和默认都支持</p><pre class=" language-mysql"><code class="language-mysql">[constraint 约束名] 约束类型(字段名) [FOREIGN KEY() REFERENCE 表名(字段名)];CREATE TABLE IF NOT EXISTS stuinfo(    id INT PRIMARY KEY,    stuname VARCHAR(20) NOT NULL,    age INT DEFAULT 18,    seat INT UNIQUE,    majorid INT,    CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCE major(id));</code></pre></li><li><p>主键和UNIQUE：<br>主键只能在一个表里有一个，但可以有联合主键（不推荐），UNIQUE可以有多个，也可以组合        </p></li><li><p>外键<br>要求在从表设置外键关系、从外的外键列的类型和朱标的关联列的类型要求一致或兼容，名称无要求<br>主表的关联列必须是一个key（一般时主键或UNIQUE）<br>删除数据时先删从表才能再删除主表</p></li></ul></li></ul></li><li><p>修改表时</p><ul><li><p>列级约束</p><pre class=" language-mysql"><code class="language-mysql">  ALTER TABLE stuinfo   MODIFY COLUMN stuname VARCHAR(20) 约束;</code></pre></li><li><p>表级约束</p><pre class=" language-mysql"><code class="language-mysql">  ALTER TABLE stuinfo   ADD UNIQUE(seat);  ALTER TABLE stuinfo   ADD FOREIGN KEY(majorid) REFERENCE major(id);</code></pre></li></ul></li><li><p>修改表时删除约束</p><pre class=" language-mysql"><code class="language-mysql">  NOT NULL 改为NULL 默认改为不写   -- 删除主键  ALTER TABLE stuinfo   DROP PRIMARY KEY;  -- 删除UNIQUE   ALTER TABLE 表名   DROP INDEX 字段名;  -- 删除外键   ALTER TABLE 表名   DROP FOREIGN KEY 字段名;</code></pre></li></ul><h3 id="标识列：自增长列"><a href="#标识列：自增长列" class="headerlink" title="标识列：自增长列"></a>标识列：自增长列</h3><ul><li>类型后+AUTO_INCREMENT</li><li>要求仅给主键、外键或UNIQUE类型添加</li><li>一个表至多一个标识列</li><li>修改为非标识列时直接后面不写</li></ul><h2 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h2><h3 id="事务和事务处理"><a href="#事务和事务处理" class="headerlink" title="事务和事务处理"></a>事务和事务处理</h3><blockquote><p>事务：一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</p></blockquote><ul><li><p>ACID属性</p><ul><li>原子性：事务是一个不可分割的工作单位，操作要么都发生要么都不发生</li><li>一致性：事务必须是一个数据库从一个一致性状态变换到另一个一致性状态</li><li>隔离性：一个事务的执行不能被其他事务干扰，事务内部操作对其他并发事务隔离，不可相互干扰</li><li>持久性：一个事务一旦被提交，他对数据库中的改变就是永久性的，后续操作不会有任何影响</li></ul></li><li><p>隐式事务没有明显的开始和结束如：insert、update、delete</p><p>一般的显式事务都是insert、update、delete，显示事务必须先设置自动提交功能为禁用set autocommit=0;</p><pre class=" language-mysql"><code class="language-mysql">开启事务：set autocommit=0;start transaction;编写sql结束事务-- 结束时才决定提交事务或回滚事务</code></pre></li><li><p>并发</p><ul><li><p>脏读：2读取了1没提交的数据（例如1回滚 read uncommitted</p></li><li><p>不可重复读：2读了数据后1更新 read committed</p></li><li><p>幻读：2读取了后1插入数据 repeatable read</p><pre class=" language-mysql"><code class="language-mysql">-- 设置当前连接的隔离级别set transaction isolation level read committed;-- 设置数据库系统的全局的隔离级别set global transaction isolation level read committed;savepoint 节点名;rollback to 节点名;</code></pre></li></ul></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li><p>视图：虚拟表，和普通表一样使用 重用语句，简化操作，保护数据，提高安全性</p></li><li><p>查看视图</p><pre class=" language-mysql"><code class="language-mysql">desc 视图名；show create view 视图名；</code></pre></li><li><p>视图的更新</p><pre><code>CREATE OR REPLACE VIEW my_vl ASSELECT .....或 ALTER VIEW +后续一样</code></pre><p>视图的增删会影响原表<br>tips：包含以下关键字的sql语句：分组函数、distinct、GROUP BY、HAVING 、UNION或者UNION ALL、SELECT、JOIN、FROM、WHERE子句的子查询引用了FROM子句中的视图不允许更新</p></li><li><p>视图的删除</p><pre class=" language-mysql"><code class="language-mysql">DROP VIEW 视图名、视图名;</code></pre></li><li><p>视图和表的区别</p><p>视图创建用create view，基本不占用实际物理空间，只是保存sql逻辑，一般不能增删改，表创建用create table，占用实际物理空间，保存了具体数据</p></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>系统变量</p><ul><li><p>查看所有的系统|会话变量</p><pre class=" language-mysql"><code class="language-mysql">SHOW GLOBAL|SESSION VARIABLES [LIKE '%char%'];</code></pre></li><li><p>查看某个指定的系统|会话变量</p><pre class=" language-mysql"><code class="language-mysql">SELECT @@GLOBAL|SESSION.系统变量名</code></pre></li><li><p>为某个系统变量赋值 若显式声明则默认为 SESSION            </p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL|SESSION 名=值;SET @@GLOBAL|SESSION.系统变量名=值;</code></pre></li><li><p>全局变量：作用域：每次启动全局变量赋初值，对全局会话有效，重启无效                        </p></li><li><p>会话变量：针对于单独的会话（连接）有效</p></li></ul></li><li><p>自定义变量</p></li></ul><h3 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h3><h4 id="储存过程"><a href="#储存过程" class="headerlink" title="储存过程"></a>储存过程</h4><blockquote><p>存储过程是一组预先编译好的sql语句的集合，提高重用性、简化操作，减少编译和连接次数，提高效率</p></blockquote><ul><li><p>创建</p><pre><code>CREATE PROCEDURE 储存过程名(参数列表)BEGIN    储存过程体END</code></pre><ul><li>参数模式：IN作为输入 OUT作为返回值 INOUT作为输入且返回值</li><li>如果存储过程体中仅有一句话则可省略BEGIN END</li><li>储存过程中每句sql结尾必须加分号，结尾可以用DELIMITER重新设置：DELIMITER 结束标记</li></ul></li><li><p>调用</p><pre class=" language-mysql"><code class="language-mysql">CALL 储存过程名(实参列表);DELIMITER $CREATE PROCEDURE myp1()BEGIN    INSERT INTO admin(user,`password`)    VALUES(),(),(),()END $CALL myp1()$CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))BEGIN    SELECT bo.*    FROM boys bo    RIGHT JOIN beauty b ON bo.id= b.boyfriend_id    WHERE b.name=beautyName;END $-- 创建储存过程实现传入用户名和密码，插入到admin表中CREATE PROCEDURE test_pro1(IN username VARCHAR(20)),IN loginPwd VARCHAR(20)BEGIN    INSERT INTO admin(admin.username,PASSWORD)    VALUES(username,loginpwd);END $-- 传入女神名称返回 女神and男神格式的字符串CREATE PROCEDURE test_pro5(IN beautyName VARCHAR(20),OUT str VARCHAR(50))BEGIN    SELECT CONCAT(beautyName,' and ',IFNULL(boyName,'null')) INTO str    FROM boys bo                                RIGHT JOIN beauty b ON b.boyfriend_id=bo.id    WHERE b.name=beautyName;END $CALL test_pro5('小昭',@str)$SELECT @str $</code></pre></li><li><p>删除</p><pre class=" language-mysql"><code class="language-mysql">DROP PROCEDURE 储存过程名</code></pre></li><li><p>查看</p><pre class=" language-mysql"><code class="language-mysql">SHOW CREATE PROCEDURE 存储过程名;</code></pre></li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><blockquote><p>有且只能有一个返回值，多用于处理数据</p></blockquote><pre class=" language-mysql"><code class="language-mysql">CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型BEGIN    函数体ENDCREATE FUNCTION myf1() RETURNS INTBEGIN    DECLARE c INT DEFAULT 0;    SELECT COUNT(*) INTO c    FROM employees    RETURNS c;END $</code></pre><h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><ul><li><p>顺序结构</p></li><li><p>分支结构</p><ul><li><p>IF函数</p><pre class=" language-mysql"><code class="language-mysql">SELECT IF(表达式1,表达式2，表达式3) ->同三目运算符算法</code></pre></li><li><p>CASE</p><pre class=" language-mysql"><code class="language-mysql">-- 简单函数：枚举这个字段所有可能的值CASE 变量|表达式|字段WHEN 要判断的值 THEN 返回的值或语句1;WHEN 要判断的值 THEN 返回的值或语句2;...ELSE 返回的值或语句3;END    CASE;-- 搜索函数：可以写判断，并且搜索函数只会返回第一个符合条件的值，其他case被忽略CASE     WHEN 要判断的表达式 THEN 返回的值或语句1;    WHEN 要判断的表达式 THEN 返回的值或语句2;    ...    ELSE 返回的值或语句3;END CASE;</code></pre></li></ul></li><li><p>循环结构</p><pre><code>WHILE LOOP REPEATWHILE 循环条件 DO    循环体;END WHILE[标签];-- 例：CREATE PROCEDURE pro_while1(IN insertCount INT)BEGIN    DECLAR i INT DEFAULT 1;    a: WHILE i&lt;=insertCount DO    INSERT INT amin(username,`passsword`) VALUES(CONCAT(&#39;Rose&#39;+i),&#39;666&#39;);    IF i&gt;=20 THEN LEAVE a;    SET i=i+1;END WHILE a;END;[标签:]LOOP     循环体;END LOOP [标签];[标签:]REPEAT                循环体;                UNTIL 结束循环的条件;            END REPEAT {标签};            循环控制                 iterate继续，结束本次循环，继续下一次                leave 跳出，结束当前所在的循环</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/19/hello-world/"/>
      <url>/2020/02/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
